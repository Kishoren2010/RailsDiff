{
"diffs": [
{
"filepath": "Gemfile",
"diff": "@@ -1,6 +1,6 @@\n source 'http://rubygems.org'\n \n-gem 'rails', '3.0.9.rc5'\n+gem 'rails', '3.0.14'\n \n # Bundle edge Rails instead:\n # gem 'rails', :git => 'git://github.com/rails/rails.git'\n"
}
,
{
"filepath": "public/javascripts/rails.js",
"diff": "@@ -1,4 +1,14 @@\n (function() {\n+  Ajax.Responders.register({\n+    onCreate: function(request) {\n+      var token = $$('meta[name=csrf-token]')[0];\n+      if (token) {\n+        if (!request.options.requestHeaders) request.options.requestHeaders = {};\n+        request.options.requestHeaders['X-CSRF-Token'] = token.readAttribute('content');\n+      }\n+    }\n+  });\n+\n   // Technique from Juriy Zaytsev\n   // http://thinkweb2.com/projects/prototype/detecting-event-support-without-browser-sniffing/\n   function isEventSupported(eventName) {\n@@ -14,33 +24,33 @@\n   }\n \n   function isForm(element) {\n-    return Object.isElement(element) && element.nodeName.toUpperCase() == 'FORM'\n+    return Object.isElement(element) && element.nodeName.toUpperCase() == 'FORM';\n   }\n \n   function isInput(element) {\n     if (Object.isElement(element)) {\n-      var name = element.nodeName.toUpperCase()\n-      return name == 'INPUT' || name == 'SELECT' || name == 'TEXTAREA'\n+      var name = element.nodeName.toUpperCase();\n+      return name == 'INPUT' || name == 'SELECT' || name == 'TEXTAREA';\n     }\n-    else return false\n+    else return false;\n   }\n \n   var submitBubbles = isEventSupported('submit'),\n-      changeBubbles = isEventSupported('change')\n+      changeBubbles = isEventSupported('change');\n \n   if (!submitBubbles || !changeBubbles) {\n     // augment the Event.Handler class to observe custom events when needed\n     Event.Handler.prototype.initialize = Event.Handler.prototype.initialize.wrap(\n       function(init, element, eventName, selector, callback) {\n-        init(element, eventName, selector, callback)\n+        init(element, eventName, selector, callback);\n         // is the handler being attached to an element that doesn't support this event?\n         if ( (!submitBubbles && this.eventName == 'submit' && !isForm(this.element)) ||\n              (!changeBubbles && this.eventName == 'change' && !isInput(this.element)) ) {\n           // \"submit\" => \"emulated:submit\"\n-          this.eventName = 'emulated:' + this.eventName\n+          this.eventName = 'emulated:' + this.eventName;\n         }\n       }\n-    )\n+    );\n   }\n \n   if (!submitBubbles) {\n@@ -49,26 +59,26 @@\n       // special handler for the real \"submit\" event (one-time operation)\n       if (!form.retrieve('emulated:submit')) {\n         form.on('submit', function(submitEvent) {\n-          var emulated = form.fire('emulated:submit', submitEvent, true)\n+          var emulated = form.fire('emulated:submit', submitEvent, true);\n           // if custom event received preventDefault, cancel the real one too\n-          if (emulated.returnValue === false) submitEvent.preventDefault()\n-        })\n-        form.store('emulated:submit', true)\n+          if (emulated.returnValue === false) submitEvent.preventDefault();\n+        });\n+        form.store('emulated:submit', true);\n       }\n-    })\n+    });\n   }\n \n   if (!changeBubbles) {\n     // discover form inputs on the page\n-    document.on('focusin', 'input, select, texarea', function(focusEvent, input) {\n+    document.on('focusin', 'input, select, textarea', function(focusEvent, input) {\n       // special handler for real \"change\" events\n       if (!input.retrieve('emulated:change')) {\n         input.on('change', function(changeEvent) {\n-          input.fire('emulated:change', changeEvent, true)\n-        })\n-        input.store('emulated:change', true)\n+          input.fire('emulated:change', changeEvent, true);\n+        });\n+        input.store('emulated:change', true);\n       }\n-    })\n+    });\n   }\n \n   function handleRemote(element) {\n@@ -80,7 +90,10 @@\n     if (element.tagName.toLowerCase() === 'form') {\n       method = element.readAttribute('method') || 'post';\n       url    = element.readAttribute('action');\n-      params = element.serialize();\n+      // serialize the form with respect to the submit button that was pressed\n+      params = element.serialize({ submit: element.retrieve('rails:submit-button') });\n+      // clear the pressed submit button information\n+      element.store('rails:submit-button', null);\n     } else {\n       method = element.readAttribute('data-method') || 'get';\n       url    = element.readAttribute('href');\n@@ -92,14 +105,19 @@\n       parameters: params,\n       evalScripts: true,\n \n-      onComplete:    function(request) { element.fire(\"ajax:complete\", request); },\n-      onSuccess:     function(request) { element.fire(\"ajax:success\",  request); },\n-      onFailure:     function(request) { element.fire(\"ajax:failure\",  request); }\n+      onCreate:   function(response) { element.fire(\"ajax:create\",   response); },\n+      onComplete: function(response) { element.fire(\"ajax:complete\", response); },\n+      onSuccess:  function(response) { element.fire(\"ajax:success\",  response); },\n+      onFailure:  function(response) { element.fire(\"ajax:failure\",  response); }\n     });\n \n     element.fire(\"ajax:after\");\n   }\n \n+  function insertHiddenField(form, name, value) {\n+    form.insert(new Element('input', { type: 'hidden', name: name, value: value }));\n+  }\n+\n   function handleMethod(element) {\n     var method = element.readAttribute('data-method'),\n         url = element.readAttribute('href'),\n@@ -107,85 +125,78 @@\n         csrf_token = $$('meta[name=csrf-token]')[0];\n \n     var form = new Element('form', { method: \"POST\", action: url, style: \"display: none;\" });\n-    element.parentNode.insert(form);\n+    $(element.parentNode).insert(form);\n \n     if (method !== 'post') {\n-      var field = new Element('input', { type: 'hidden', name: '_method', value: method });\n-      form.insert(field);\n+      insertHiddenField(form, '_method', method);\n     }\n \n     if (csrf_param) {\n-      var param = csrf_param.readAttribute('content'),\n-          token = csrf_token.readAttribute('content'),\n-          field = new Element('input', { type: 'hidden', name: param, value: token });\n-      form.insert(field);\n+      insertHiddenField(form, csrf_param.readAttribute('content'), csrf_token.readAttribute('content'));\n     }\n \n     form.submit();\n   }\n \n+  function disableFormElements(form) {\n+    form.select('input[type=submit][data-disable-with]').each(function(input) {\n+      input.store('rails:original-value', input.getValue());\n+      input.setValue(input.readAttribute('data-disable-with')).disable();\n+    });\n+  }\n+  \n+  function enableFormElements(form) {\n+    form.select('input[type=submit][data-disable-with]').each(function(input) {\n+      input.setValue(input.retrieve('rails:original-value')).enable();\n+    });\n+  }\n \n-  document.on(\"click\", \"*[data-confirm]\", function(event, element) {\n+  function allowAction(element) {\n     var message = element.readAttribute('data-confirm');\n-    if (!confirm(message)) event.stop();\n-  });\n+    return !message || confirm(message);\n+  }\n+\n+  document.on('click', 'a[data-confirm], a[data-remote], a[data-method]', function(event, link) {\n+    if (!allowAction(link)) {\n+      event.stop();\n+      return false;\n+    }\n \n-  document.on(\"click\", \"a[data-remote]\", function(event, element) {\n-    if (event.stopped) return;\n-    handleRemote(element);\n-    event.stop();\n+    if (link.readAttribute('data-remote')) {\n+      handleRemote(link);\n+      event.stop();\n+    } else if (link.readAttribute('data-method')) {\n+      handleMethod(link);\n+      event.stop();\n+    }\n   });\n \n-  document.on(\"click\", \"a[data-method]\", function(event, element) {\n-    if (event.stopped) return;\n-    handleMethod(element);\n-    event.stop();\n+  document.on(\"click\", \"form input[type=submit], form button[type=submit], form button:not([type])\", function(event, button) {\n+    // register the pressed submit button\n+    event.findElement('form').store('rails:submit-button', button.name || false);\n   });\n \n   document.on(\"submit\", function(event) {\n-    var element = event.findElement(),\n-        message = element.readAttribute('data-confirm');\n-    if (message && !confirm(message)) {\n+    var form = event.findElement();\n+\n+    if (!allowAction(form)) {\n       event.stop();\n       return false;\n     }\n \n-    var inputs = element.select(\"input[type=submit][data-disable-with]\");\n-    inputs.each(function(input) {\n-      input.disabled = true;\n-      input.writeAttribute('data-original-value', input.value);\n-      input.value = input.readAttribute('data-disable-with');\n-    });\n-\n-    var element = event.findElement(\"form[data-remote]\");\n-    if (element) {\n-      handleRemote(element);\n+    if (form.readAttribute('data-remote')) {\n+      handleRemote(form);\n       event.stop();\n+    } else {\n+      disableFormElements(form);\n     }\n   });\n \n-  document.on(\"ajax:after\", \"form\", function(event, element) {\n-    var inputs = element.select(\"input[type=submit][disabled=true][data-disable-with]\");\n-    inputs.each(function(input) {\n-      input.value = input.readAttribute('data-original-value');\n-      input.removeAttribute('data-original-value');\n-      input.disabled = false;\n-    });\n+  document.on('ajax:create', 'form', function(event, form) {\n+    if (form == event.findElement()) disableFormElements(form);\n   });\n-\n-  Ajax.Responders.register({\n-    onCreate: function(request) {\n-      var csrf_meta_tag = $$('meta[name=csrf-token]')[0];\n-\n-      if (csrf_meta_tag) {\n-        var header = 'X-CSRF-Token',\n-            token = csrf_meta_tag.readAttribute('content');\n-\n-        if (!request.options.requestHeaders) {\n-          request.options.requestHeaders = {};\n-        }\n-        request.options.requestHeaders[header] = token;\n-      }\n-    }\n+  \n+  document.on('ajax:complete', 'form', function(event, form) {\n+    if (form == event.findElement()) enableFormElements(form);\n   });\n })();\n"
}
]
}
