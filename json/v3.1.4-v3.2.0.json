{
"diffs": [
{
"filepath": "Gemfile",
"diff": "@@ -1,9 +1,9 @@\n-source 'http://rubygems.org'\n+source 'https://rubygems.org'\n \n-gem 'rails', '3.1.4'\n+gem 'rails', '3.2.0'\n \n # Bundle edge Rails instead:\n-# gem 'rails',     :git => 'git://github.com/rails/rails.git'\n+# gem 'rails', :git => 'git://github.com/rails/rails.git'\n \n gem 'sqlite3'\n \n@@ -11,8 +11,8 @@\n # Gems used only for assets and not required\n # in production environments by default.\n group :assets do\n-  gem 'sass-rails',   '~> 3.1.5'\n-  gem 'coffee-rails', '~> 3.1.1'\n+  gem 'sass-rails',   '~> 3.2.3'\n+  gem 'coffee-rails', '~> 3.2.1'\n \n   # See https://github.com/sstephenson/execjs#readme for more supported runtimes\n   # gem 'therubyracer'\n@@ -25,6 +25,9 @@\n # To use ActiveModel has_secure_password\n # gem 'bcrypt-ruby', '~> 3.0.0'\n \n+# To use Jbuilder templates for JSON\n+# gem 'jbuilder'\n+\n # Use unicorn as the web server\n # gem 'unicorn'\n \n@@ -33,8 +36,3 @@\n \n # To use debugger\n # gem 'ruby-debug19', :require => 'ruby-debug'\n-\n-group :test do\n-  # Pretty printed test output\n-  gem 'turn', '~> 0.8.3', :require => false\n-end\n"
}
,
{
"filepath": "README",
"diff": "@@ -1,261 +0,0 @@\n-== Welcome to Rails\n-\n-Rails is a web-application framework that includes everything needed to create\n-database-backed web applications according to the Model-View-Control pattern.\n-\n-This pattern splits the view (also called the presentation) into \"dumb\"\n-templates that are primarily responsible for inserting pre-built data in between\n-HTML tags. The model contains the \"smart\" domain objects (such as Account,\n-Product, Person, Post) that holds all the business logic and knows how to\n-persist themselves to a database. The controller handles the incoming requests\n-(such as Save New Account, Update Product, Show Post) by manipulating the model\n-and directing data to the view.\n-\n-In Rails, the model is handled by what's called an object-relational mapping\n-layer entitled Active Record. This layer allows you to present the data from\n-database rows as objects and embellish these data objects with business logic\n-methods. You can read more about Active Record in\n-link:files/vendor/rails/activerecord/README.html.\n-\n-The controller and view are handled by the Action Pack, which handles both\n-layers by its two parts: Action View and Action Controller. These two layers\n-are bundled in a single package due to their heavy interdependence. This is\n-unlike the relationship between the Active Record and Action Pack that is much\n-more separate. Each of these packages can be used independently outside of\n-Rails. You can read more about Action Pack in\n-link:files/vendor/rails/actionpack/README.html.\n-\n-\n-== Getting Started\n-\n-1. At the command prompt, create a new Rails application:\n-       <tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)\n-\n-2. Change directory to <tt>myapp</tt> and start the web server:\n-       <tt>cd myapp; rails server</tt> (run with --help for options)\n-\n-3. Go to http://localhost:3000/ and you'll see:\n-       \"Welcome aboard: You're riding Ruby on Rails!\"\n-\n-4. Follow the guidelines to start developing your application. You can find\n-the following resources handy:\n-\n-* The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html\n-* Ruby on Rails Tutorial Book: http://www.railstutorial.org/\n-\n-\n-== Debugging Rails\n-\n-Sometimes your application goes wrong. Fortunately there are a lot of tools that\n-will help you debug it and get it back on the rails.\n-\n-First area to check is the application log files. Have \"tail -f\" commands\n-running on the server.log and development.log. Rails will automatically display\n-debugging and runtime information to these files. Debugging info will also be\n-shown in the browser on requests from 127.0.0.1.\n-\n-You can also log your own messages directly into the log file from your code\n-using the Ruby logger class from inside your controllers. Example:\n-\n-  class WeblogController < ActionController::Base\n-    def destroy\n-      @weblog = Weblog.find(params[:id])\n-      @weblog.destroy\n-      logger.info(\"\#{Time.now} Destroyed Weblog ID #\#{@weblog.id}!\")\n-    end\n-  end\n-\n-The result will be a message in your log file along the lines of:\n-\n-  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!\n-\n-More information on how to use the logger is at http://www.ruby-doc.org/core/\n-\n-Also, Ruby documentation can be found at http://www.ruby-lang.org/. There are\n-several books available online as well:\n-\n-* Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)\n-* Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)\n-\n-These two books will bring you up to speed on the Ruby language and also on\n-programming in general.\n-\n-\n-== Debugger\n-\n-Debugger support is available through the debugger command when you start your\n-Mongrel or WEBrick server with --debugger. This means that you can break out of\n-execution at any point in the code, investigate and change the model, and then,\n-resume execution! You need to install ruby-debug to run the server in debugging\n-mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:\n-\n-  class WeblogController < ActionController::Base\n-    def index\n-      @posts = Post.all\n-      debugger\n-    end\n-  end\n-\n-So the controller will accept the action, run the first line, then present you\n-with a IRB prompt in the server window. Here you can do things like:\n-\n-  >> @posts.inspect\n-  => \"[#<Post:0x14a6be8\n-          @attributes={\"title\"=>nil, \"body\"=>nil, \"id\"=>\"1\"}>,\n-       #<Post:0x14a6620\n-          @attributes={\"title\"=>\"Rails\", \"body\"=>\"Only ten..\", \"id\"=>\"2\"}>]\"\n-  >> @posts.first.title = \"hello from a debugger\"\n-  => \"hello from a debugger\"\n-\n-...and even better, you can examine how your runtime objects actually work:\n-\n-  >> f = @posts.first\n-  => #<Post:0x13630c4 @attributes={\"title\"=>nil, \"body\"=>nil, \"id\"=>\"1\"}>\n-  >> f.\n-  Display all 152 possibilities? (y or n)\n-\n-Finally, when you're ready to resume execution, you can enter \"cont\".\n-\n-\n-== Console\n-\n-The console is a Ruby shell, which allows you to interact with your\n-application's domain model. Here you'll have all parts of the application\n-configured, just like it is when the application is running. You can inspect\n-domain models, change values, and save to the database. Starting the script\n-without arguments will launch it in the development environment.\n-\n-To start the console, run <tt>rails console</tt> from the application\n-directory.\n-\n-Options:\n-\n-* Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications\n-  made to the database.\n-* Passing an environment name as an argument will load the corresponding\n-  environment. Example: <tt>rails console production</tt>.\n-\n-To reload your controllers and models after launching the console run\n-<tt>reload!</tt>\n-\n-More information about irb can be found at:\n-link:http://www.rubycentral.org/pickaxe/irb.html\n-\n-\n-== dbconsole\n-\n-You can go to the command line of your database directly through <tt>rails\n-dbconsole</tt>. You would be connected to the database with the credentials\n-defined in database.yml. Starting the script without arguments will connect you\n-to the development database. Passing an argument will connect you to a different\n-database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,\n-PostgreSQL and SQLite 3.\n-\n-== Description of Contents\n-\n-The default directory structure of a generated Ruby on Rails application:\n-\n-  |-- app\n-  |   |-- assets\n-  |       |-- images\n-  |       |-- javascripts\n-  |       `-- stylesheets\n-  |   |-- controllers\n-  |   |-- helpers\n-  |   |-- mailers\n-  |   |-- models\n-  |   `-- views\n-  |       `-- layouts\n-  |-- config\n-  |   |-- environments\n-  |   |-- initializers\n-  |   `-- locales\n-  |-- db\n-  |-- doc\n-  |-- lib\n-  |   `-- tasks\n-  |-- log\n-  |-- public\n-  |-- script\n-  |-- test\n-  |   |-- fixtures\n-  |   |-- functional\n-  |   |-- integration\n-  |   |-- performance\n-  |   `-- unit\n-  |-- tmp\n-  |   |-- cache\n-  |   |-- pids\n-  |   |-- sessions\n-  |   `-- sockets\n-  `-- vendor\n-      |-- assets\n-          `-- stylesheets\n-      `-- plugins\n-\n-app\n-  Holds all the code that's specific to this particular application.\n-\n-app/assets\n-  Contains subdirectories for images, stylesheets, and JavaScript files.\n-\n-app/controllers\n-  Holds controllers that should be named like weblogs_controller.rb for\n-  automated URL mapping. All controllers should descend from\n-  ApplicationController which itself descends from ActionController::Base.\n-\n-app/models\n-  Holds models that should be named like post.rb. Models descend from\n-  ActiveRecord::Base by default.\n-\n-app/views\n-  Holds the template files for the view that should be named like\n-  weblogs/index.html.erb for the WeblogsController#index action. All views use\n-  eRuby syntax by default.\n-\n-app/views/layouts\n-  Holds the template files for layouts to be used with views. This models the\n-  common header/footer method of wrapping views. In your views, define a layout\n-  using the <tt>layout :default</tt> and create a file named default.html.erb.\n-  Inside default.html.erb, call <% yield %> to render the view using this\n-  layout.\n-\n-app/helpers\n-  Holds view helpers that should be named like weblogs_helper.rb. These are\n-  generated for you automatically when using generators for controllers.\n-  Helpers can be used to wrap functionality for your views into methods.\n-\n-config\n-  Configuration files for the Rails environment, the routing map, the database,\n-  and other dependencies.\n-\n-db\n-  Contains the database schema in schema.rb. db/migrate contains all the\n-  sequence of Migrations for your schema.\n-\n-doc\n-  This directory is where your application documentation will be stored when\n-  generated using <tt>rake doc:app</tt>\n-\n-lib\n-  Application specific libraries. Basically, any kind of custom code that\n-  doesn't belong under controllers, models, or helpers. This directory is in\n-  the load path.\n-\n-public\n-  The directory available for the web server. Also contains the dispatchers and the\n-  default HTML files. This should be set as the DOCUMENT_ROOT of your web\n-  server.\n-\n-script\n-  Helper scripts for automation and generation.\n-\n-test\n-  Unit and functional tests along with fixtures. When using the rails generate\n-  command, template test files will be generated for you and placed in this\n-  directory.\n-\n-vendor\n-  External libraries that the application depends on. Also includes the plugins\n-  subdirectory. If the app has frozen rails, those gems also go here, under\n-  vendor/rails/. This directory is in the load path.\n"
}
,
{
"filepath": "README.rdoc",
"diff": "@@ -0,0 +1,261 @@\n+== Welcome to Rails\n+\n+Rails is a web-application framework that includes everything needed to create\n+database-backed web applications according to the Model-View-Control pattern.\n+\n+This pattern splits the view (also called the presentation) into \"dumb\"\n+templates that are primarily responsible for inserting pre-built data in between\n+HTML tags. The model contains the \"smart\" domain objects (such as Account,\n+Product, Person, Post) that holds all the business logic and knows how to\n+persist themselves to a database. The controller handles the incoming requests\n+(such as Save New Account, Update Product, Show Post) by manipulating the model\n+and directing data to the view.\n+\n+In Rails, the model is handled by what's called an object-relational mapping\n+layer entitled Active Record. This layer allows you to present the data from\n+database rows as objects and embellish these data objects with business logic\n+methods. You can read more about Active Record in\n+link:files/vendor/rails/activerecord/README.html.\n+\n+The controller and view are handled by the Action Pack, which handles both\n+layers by its two parts: Action View and Action Controller. These two layers\n+are bundled in a single package due to their heavy interdependence. This is\n+unlike the relationship between the Active Record and Action Pack that is much\n+more separate. Each of these packages can be used independently outside of\n+Rails. You can read more about Action Pack in\n+link:files/vendor/rails/actionpack/README.html.\n+\n+\n+== Getting Started\n+\n+1. At the command prompt, create a new Rails application:\n+       <tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)\n+\n+2. Change directory to <tt>myapp</tt> and start the web server:\n+       <tt>cd myapp; rails server</tt> (run with --help for options)\n+\n+3. Go to http://localhost:3000/ and you'll see:\n+       \"Welcome aboard: You're riding Ruby on Rails!\"\n+\n+4. Follow the guidelines to start developing your application. You can find\n+the following resources handy:\n+\n+* The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html\n+* Ruby on Rails Tutorial Book: http://www.railstutorial.org/\n+\n+\n+== Debugging Rails\n+\n+Sometimes your application goes wrong. Fortunately there are a lot of tools that\n+will help you debug it and get it back on the rails.\n+\n+First area to check is the application log files. Have \"tail -f\" commands\n+running on the server.log and development.log. Rails will automatically display\n+debugging and runtime information to these files. Debugging info will also be\n+shown in the browser on requests from 127.0.0.1.\n+\n+You can also log your own messages directly into the log file from your code\n+using the Ruby logger class from inside your controllers. Example:\n+\n+  class WeblogController < ActionController::Base\n+    def destroy\n+      @weblog = Weblog.find(params[:id])\n+      @weblog.destroy\n+      logger.info(\"\#{Time.now} Destroyed Weblog ID #\#{@weblog.id}!\")\n+    end\n+  end\n+\n+The result will be a message in your log file along the lines of:\n+\n+  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!\n+\n+More information on how to use the logger is at http://www.ruby-doc.org/core/\n+\n+Also, Ruby documentation can be found at http://www.ruby-lang.org/. There are\n+several books available online as well:\n+\n+* Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)\n+* Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)\n+\n+These two books will bring you up to speed on the Ruby language and also on\n+programming in general.\n+\n+\n+== Debugger\n+\n+Debugger support is available through the debugger command when you start your\n+Mongrel or WEBrick server with --debugger. This means that you can break out of\n+execution at any point in the code, investigate and change the model, and then,\n+resume execution! You need to install ruby-debug to run the server in debugging\n+mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:\n+\n+  class WeblogController < ActionController::Base\n+    def index\n+      @posts = Post.all\n+      debugger\n+    end\n+  end\n+\n+So the controller will accept the action, run the first line, then present you\n+with a IRB prompt in the server window. Here you can do things like:\n+\n+  >> @posts.inspect\n+  => \"[#<Post:0x14a6be8\n+          @attributes={\"title\"=>nil, \"body\"=>nil, \"id\"=>\"1\"}>,\n+       #<Post:0x14a6620\n+          @attributes={\"title\"=>\"Rails\", \"body\"=>\"Only ten..\", \"id\"=>\"2\"}>]\"\n+  >> @posts.first.title = \"hello from a debugger\"\n+  => \"hello from a debugger\"\n+\n+...and even better, you can examine how your runtime objects actually work:\n+\n+  >> f = @posts.first\n+  => #<Post:0x13630c4 @attributes={\"title\"=>nil, \"body\"=>nil, \"id\"=>\"1\"}>\n+  >> f.\n+  Display all 152 possibilities? (y or n)\n+\n+Finally, when you're ready to resume execution, you can enter \"cont\".\n+\n+\n+== Console\n+\n+The console is a Ruby shell, which allows you to interact with your\n+application's domain model. Here you'll have all parts of the application\n+configured, just like it is when the application is running. You can inspect\n+domain models, change values, and save to the database. Starting the script\n+without arguments will launch it in the development environment.\n+\n+To start the console, run <tt>rails console</tt> from the application\n+directory.\n+\n+Options:\n+\n+* Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications\n+  made to the database.\n+* Passing an environment name as an argument will load the corresponding\n+  environment. Example: <tt>rails console production</tt>.\n+\n+To reload your controllers and models after launching the console run\n+<tt>reload!</tt>\n+\n+More information about irb can be found at:\n+link:http://www.rubycentral.org/pickaxe/irb.html\n+\n+\n+== dbconsole\n+\n+You can go to the command line of your database directly through <tt>rails\n+dbconsole</tt>. You would be connected to the database with the credentials\n+defined in database.yml. Starting the script without arguments will connect you\n+to the development database. Passing an argument will connect you to a different\n+database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,\n+PostgreSQL and SQLite 3.\n+\n+== Description of Contents\n+\n+The default directory structure of a generated Ruby on Rails application:\n+\n+  |-- app\n+  |   |-- assets\n+  |       |-- images\n+  |       |-- javascripts\n+  |       `-- stylesheets\n+  |   |-- controllers\n+  |   |-- helpers\n+  |   |-- mailers\n+  |   |-- models\n+  |   `-- views\n+  |       `-- layouts\n+  |-- config\n+  |   |-- environments\n+  |   |-- initializers\n+  |   `-- locales\n+  |-- db\n+  |-- doc\n+  |-- lib\n+  |   `-- tasks\n+  |-- log\n+  |-- public\n+  |-- script\n+  |-- test\n+  |   |-- fixtures\n+  |   |-- functional\n+  |   |-- integration\n+  |   |-- performance\n+  |   `-- unit\n+  |-- tmp\n+  |   |-- cache\n+  |   |-- pids\n+  |   |-- sessions\n+  |   `-- sockets\n+  `-- vendor\n+      |-- assets\n+          `-- stylesheets\n+      `-- plugins\n+\n+app\n+  Holds all the code that's specific to this particular application.\n+\n+app/assets\n+  Contains subdirectories for images, stylesheets, and JavaScript files.\n+\n+app/controllers\n+  Holds controllers that should be named like weblogs_controller.rb for\n+  automated URL mapping. All controllers should descend from\n+  ApplicationController which itself descends from ActionController::Base.\n+\n+app/models\n+  Holds models that should be named like post.rb. Models descend from\n+  ActiveRecord::Base by default.\n+\n+app/views\n+  Holds the template files for the view that should be named like\n+  weblogs/index.html.erb for the WeblogsController#index action. All views use\n+  eRuby syntax by default.\n+\n+app/views/layouts\n+  Holds the template files for layouts to be used with views. This models the\n+  common header/footer method of wrapping views. In your views, define a layout\n+  using the <tt>layout :default</tt> and create a file named default.html.erb.\n+  Inside default.html.erb, call <% yield %> to render the view using this\n+  layout.\n+\n+app/helpers\n+  Holds view helpers that should be named like weblogs_helper.rb. These are\n+  generated for you automatically when using generators for controllers.\n+  Helpers can be used to wrap functionality for your views into methods.\n+\n+config\n+  Configuration files for the Rails environment, the routing map, the database,\n+  and other dependencies.\n+\n+db\n+  Contains the database schema in schema.rb. db/migrate contains all the\n+  sequence of Migrations for your schema.\n+\n+doc\n+  This directory is where your application documentation will be stored when\n+  generated using <tt>rake doc:app</tt>\n+\n+lib\n+  Application specific libraries. Basically, any kind of custom code that\n+  doesn't belong under controllers, models, or helpers. This directory is in\n+  the load path.\n+\n+public\n+  The directory available for the web server. Also contains the dispatchers and the\n+  default HTML files. This should be set as the DOCUMENT_ROOT of your web\n+  server.\n+\n+script\n+  Helper scripts for automation and generation.\n+\n+test\n+  Unit and functional tests along with fixtures. When using the rails generate\n+  command, template test files will be generated for you and placed in this\n+  directory.\n+\n+vendor\n+  External libraries that the application depends on. Also includes the plugins\n+  subdirectory. If the app has frozen rails, those gems also go here, under\n+  vendor/rails/. This directory is in the load path.\n"
}
,
{
"filepath": "app/assets/javascripts/application.js",
"diff": "@@ -1,9 +1,15 @@\n-// This is a manifest file that'll be compiled into including all the files listed below.\n-// Add new JavaScript/Coffee code in separate files in this directory and they'll automatically\n-// be included in the compiled file accessible from http://example.com/assets/application.js\n+// This is a manifest file that'll be compiled into application.js, which will include all the files\n+// listed below.\n+//\n+// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,\n+// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.\n+//\n // It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the\n // the compiled file.\n //\n+// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD\n+// GO AFTER THE REQUIRES BELOW.\n+//\n //= require jquery\n //= require jquery_ujs\n //= require_tree .\n"
}
,
{
"filepath": "app/assets/stylesheets/application.css",
"diff": "@@ -1,7 +1,13 @@\n /*\n- * This is a manifest file that'll automatically include all the stylesheets available in this directory\n- * and any sub-directories. You're free to add application-wide styles to this file and they'll appear at\n- * the top of the compiled file, but it's generally better to create a new file per style scope.\n+ * This is a manifest file that'll be compiled into application.css, which will include all the files\n+ * listed below.\n+ *\n+ * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,\n+ * or vendor/assets/stylesheets of plugins, if any, can be referenced here using a relative path.\n+ *\n+ * You're free to add application-wide styles to this file and they'll appear at the top of the\n+ * compiled file, but it's generally better to create a new file per style scope.\n+ *\n  *= require_self\n- *= require_tree . \n-*/\n\\ No newline at end of file\n+ *= require_tree .\n+*/\n"
}
,
{
"filepath": "app/views/layouts/application.html.erb",
"diff": "@@ -2,7 +2,7 @@\n <html>\n <head>\n   <title>Railsdiff</title>\n-  <%= stylesheet_link_tag    \"application\" %>\n+  <%= stylesheet_link_tag    \"application\", :media => \"all\" %>\n   <%= javascript_include_tag \"application\" %>\n   <%= csrf_meta_tags %>\n </head>\n"
}
,
{
"filepath": "config/application.rb",
"diff": "@@ -39,6 +39,17 @@\n     # Configure sensitive parameters which will be filtered from the log file.\n     config.filter_parameters += [:password]\n \n+    # Use SQL instead of Active Record's schema dumper when creating the database.\n+    # This is necessary if your schema can't be completely dumped by the schema dumper,\n+    # like if you have constraints or database-specific column types\n+    # config.active_record.schema_format = :sql\n+\n+    # Enforce whitelist mode for mass assignment.\n+    # This will create an empty whitelist of attributes available for mass-assignment for all models\n+    # in your app. As such, your models will need to explicitly whitelist or blacklist accessible\n+    # parameters by using an attr_accessible or attr_protected declaration.\n+    # config.active_record.whitelist_attributes = true\n+\n     # Enable the asset pipeline\n     config.assets.enabled = true\n \n"
}
,
{
"filepath": "config/environments/development.rb",
"diff": "@@ -2,7 +2,7 @@\n   # Settings specified here will take precedence over those in config/application.rb\n \n   # In the development environment your application's code is reloaded on\n-  # every request.  This slows down response time but is perfect for development\n+  # every request. This slows down response time but is perfect for development\n   # since you don't have to restart the web server when you make code changes.\n   config.cache_classes = false\n \n@@ -22,6 +22,13 @@\n   # Only use best-standards-support built into browsers\n   config.action_dispatch.best_standards_support = :builtin\n \n+  # Raise exception on mass assignment protection for Active Record models\n+  config.active_record.mass_assignment_sanitizer = :strict\n+\n+  # Log the query plan for queries taking more than this (works\n+  # with SQLite, MySQL, and PostgreSQL)\n+  config.active_record.auto_explain_threshold_in_seconds = 0.5\n+\n   # Do not compress assets\n   config.assets.compress = false\n \n"
}
,
{
"filepath": "config/environments/production.rb",
"diff": "@@ -33,8 +33,11 @@\n   # See everything in the log (default is :info)\n   # config.log_level = :debug\n \n+  # Prepend all log lines with the following tags\n+  # config.log_tags = [ :subdomain, :uuid ]\n+\n   # Use a different logger for distributed setups\n-  # config.logger = SyslogLogger.new\n+  # config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)\n \n   # Use a different cache store in production\n   # config.cache_store = :mem_cache_store\n@@ -57,4 +60,8 @@\n \n   # Send deprecation notices to registered listeners\n   config.active_support.deprecation = :notify\n+\n+  # Log the query plan for queries taking more than this (works\n+  # with SQLite, MySQL, and PostgreSQL)\n+  # config.active_record.auto_explain_threshold_in_seconds = 0.5\n end\n"
}
,
{
"filepath": "config/environments/test.rb",
"diff": "@@ -2,9 +2,9 @@\n   # Settings specified here will take precedence over those in config/application.rb\n \n   # The test environment is used exclusively to run your application's\n-  # test suite.  You never need to work with it otherwise.  Remember that\n+  # test suite. You never need to work with it otherwise. Remember that\n   # your test database is \"scratch space\" for the test suite and is wiped\n-  # and recreated between test runs.  Don't rely on the data there!\n+  # and recreated between test runs. Don't rely on the data there!\n   config.cache_classes = true\n \n   # Configure static asset server for tests with Cache-Control for performance\n@@ -29,10 +29,8 @@\n   # ActionMailer::Base.deliveries array.\n   config.action_mailer.delivery_method = :test\n \n-  # Use SQL instead of Active Record's schema dumper when creating the test database.\n-  # This is necessary if your schema can't be completely dumped by the schema dumper,\n-  # like if you have constraints or database-specific column types\n-  # config.active_record.schema_format = :sql\n+  # Raise exception on mass assignment protection for Active Record models\n+  config.active_record.mass_assignment_sanitizer = :strict\n \n   # Print deprecation notices to the stderr\n   config.active_support.deprecation = :stderr\n"
}
,
{
"filepath": "config/initializers/inflections.rb",
"diff": "@@ -8,3 +8,8 @@\n #   inflect.irregular 'person', 'people'\n #   inflect.uncountable %w( fish sheep )\n # end\n+#\n+# These inflection rules are supported but not enabled by default:\n+# ActiveSupport::Inflector.inflections do |inflect|\n+#   inflect.acronym 'RESTful'\n+# end\n"
}
,
{
"filepath": "config/routes.rb",
"diff": "@@ -54,5 +54,5 @@\n \n   # This is a legacy wild controller route that's not recommended for RESTful applications.\n   # Note: This route will make all actions in every controller accessible via GET requests.\n-  # match ':controller(/:action(/:id(.:format)))'\n+  # match ':controller(/:action(/:id))(.:format)'\n end\n"
}
,
{
"filepath": "public/500.html",
"diff": "@@ -20,7 +20,6 @@\n   <!-- This file lives in public/500.html -->\n   <div class=\"dialog\">\n     <h1>We're sorry, but something went wrong.</h1>\n-    <p>We've been notified about this issue and we'll take a look at it shortly.</p>\n   </div>\n </body>\n </html>\n"
}
,
{
"filepath": "public/index.html",
"diff": "@@ -59,7 +59,7 @@\n \n \n       #header {\n-        background-image: url(\"/assets/rails.png\");\n+        background-image: url(\"assets/rails.png\");\n         background-repeat: no-repeat;\n         background-position: top left;\n         height: 64px;\n"
}
]
}
