diff -Nr -U 1000 v3.0.1/Gemfile v3.0.3/Gemfile
--- v3.0.1/Gemfile	2012-08-01 15:40:39.000000000 +0200
+++ v3.0.3/Gemfile	2012-08-01 15:40:43.000000000 +0200
@@ -1,30 +1,31 @@
 source 'http://rubygems.org'
 
-gem 'rails', '3.0.1'
+gem 'rails', '3.0.3'
 
 # Bundle edge Rails instead:
 # gem 'rails', :git => 'git://github.com/rails/rails.git'
 
 gem 'sqlite3-ruby', :require => 'sqlite3'
 
 # Use unicorn as the web server
 # gem 'unicorn'
 
 # Deploy with Capistrano
 # gem 'capistrano'
 
-# To use debugger
+# To use debugger (ruby-debug for Ruby 1.8.7+, ruby-debug19 for Ruby 1.9.2+)
 # gem 'ruby-debug'
+# gem 'ruby-debug19'
 
 # Bundle the extra gems:
 # gem 'bj'
 # gem 'nokogiri'
 # gem 'sqlite3-ruby', :require => 'sqlite3'
 # gem 'aws-s3', :require => 'aws/s3'
 
 # Bundle gems for the local environment. Make sure to
 # put test-only gems in this group so their generators
 # and rake tasks are available in development mode:
 # group :development, :test do
 #   gem 'webrat'
 # end
diff -Nr -U 1000 v3.0.1/README v3.0.3/README
--- v3.0.1/README	2012-08-01 15:40:39.000000000 +0200
+++ v3.0.3/README	2012-08-01 15:40:43.000000000 +0200
@@ -1,256 +1,256 @@
 == Welcome to Rails
 
 Rails is a web-application framework that includes everything needed to create
 database-backed web applications according to the Model-View-Control pattern.
 
 This pattern splits the view (also called the presentation) into "dumb"
 templates that are primarily responsible for inserting pre-built data in between
 HTML tags. The model contains the "smart" domain objects (such as Account,
 Product, Person, Post) that holds all the business logic and knows how to
 persist themselves to a database. The controller handles the incoming requests
 (such as Save New Account, Update Product, Show Post) by manipulating the model
 and directing data to the view.
 
 In Rails, the model is handled by what's called an object-relational mapping
 layer entitled Active Record. This layer allows you to present the data from
 database rows as objects and embellish these data objects with business logic
 methods. You can read more about Active Record in
 link:files/vendor/rails/activerecord/README.html.
 
 The controller and view are handled by the Action Pack, which handles both
 layers by its two parts: Action View and Action Controller. These two layers
 are bundled in a single package due to their heavy interdependence. This is
 unlike the relationship between the Active Record and Action Pack that is much
 more separate. Each of these packages can be used independently outside of
 Rails. You can read more about Action Pack in
 link:files/vendor/rails/actionpack/README.html.
 
 
 == Getting Started
 
 1. At the command prompt, create a new Rails application:
        <tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)
 
 2. Change directory to <tt>myapp</tt> and start the web server:
        <tt>cd myapp; rails server</tt> (run with --help for options)
 
 3. Go to http://localhost:3000/ and you'll see:
        "Welcome aboard: You're riding Ruby on Rails!"
 
 4. Follow the guidelines to start developing your application. You can find
 the following resources handy:
 
 * The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html
 * Ruby on Rails Tutorial Book: http://www.railstutorial.org/
 
 
 == Debugging Rails
 
 Sometimes your application goes wrong. Fortunately there are a lot of tools that
 will help you debug it and get it back on the rails.
 
 First area to check is the application log files. Have "tail -f" commands
 running on the server.log and development.log. Rails will automatically display
 debugging and runtime information to these files. Debugging info will also be
 shown in the browser on requests from 127.0.0.1.
 
 You can also log your own messages directly into the log file from your code
 using the Ruby logger class from inside your controllers. Example:
 
   class WeblogController < ActionController::Base
     def destroy
       @weblog = Weblog.find(params[:id])
       @weblog.destroy
       logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
     end
   end
 
 The result will be a message in your log file along the lines of:
 
   Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!
 
 More information on how to use the logger is at http://www.ruby-doc.org/core/
 
 Also, Ruby documentation can be found at http://www.ruby-lang.org/. There are
 several books available online as well:
 
 * Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)
 * Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)
 
 These two books will bring you up to speed on the Ruby language and also on
 programming in general.
 
 
 == Debugger
 
 Debugger support is available through the debugger command when you start your
 Mongrel or WEBrick server with --debugger. This means that you can break out of
 execution at any point in the code, investigate and change the model, and then,
 resume execution! You need to install ruby-debug to run the server in debugging
 mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:
 
   class WeblogController < ActionController::Base
     def index
       @posts = Post.find(:all)
       debugger
     end
   end
 
 So the controller will accept the action, run the first line, then present you
 with a IRB prompt in the server window. Here you can do things like:
 
   >> @posts.inspect
   => "[#<Post:0x14a6be8
           @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>,
        #<Post:0x14a6620
           @attributes={"title"=>"Rails", "body"=>"Only ten..", "id"=>"2"}>]"
   >> @posts.first.title = "hello from a debugger"
   => "hello from a debugger"
 
 ...and even better, you can examine how your runtime objects actually work:
 
   >> f = @posts.first
   => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
   >> f.
   Display all 152 possibilities? (y or n)
 
 Finally, when you're ready to resume execution, you can enter "cont".
 
 
 == Console
 
 The console is a Ruby shell, which allows you to interact with your
 application's domain model. Here you'll have all parts of the application
 configured, just like it is when the application is running. You can inspect
 domain models, change values, and save to the database. Starting the script
 without arguments will launch it in the development environment.
 
 To start the console, run <tt>rails console</tt> from the application
 directory.
 
 Options:
 
 * Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications
   made to the database.
 * Passing an environment name as an argument will load the corresponding
   environment. Example: <tt>rails console production</tt>.
 
 To reload your controllers and models after launching the console run
 <tt>reload!</tt>
 
 More information about irb can be found at:
 link:http://www.rubycentral.com/pickaxe/irb.html
 
 
 == dbconsole
 
 You can go to the command line of your database directly through <tt>rails
 dbconsole</tt>. You would be connected to the database with the credentials
 defined in database.yml. Starting the script without arguments will connect you
 to the development database. Passing an argument will connect you to a different
 database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,
 PostgreSQL and SQLite 3.
 
 == Description of Contents
 
 The default directory structure of a generated Ruby on Rails application:
 
   |-- app
   |   |-- controllers
   |   |-- helpers
+  |   |-- mailers
   |   |-- models
   |   `-- views
   |       `-- layouts
   |-- config
   |   |-- environments
   |   |-- initializers
   |   `-- locales
   |-- db
   |-- doc
   |-- lib
   |   `-- tasks
   |-- log
   |-- public
   |   |-- images
   |   |-- javascripts
   |   `-- stylesheets
   |-- script
-  |   `-- performance
   |-- test
   |   |-- fixtures
   |   |-- functional
   |   |-- integration
   |   |-- performance
   |   `-- unit
   |-- tmp
   |   |-- cache
   |   |-- pids
   |   |-- sessions
   |   `-- sockets
   `-- vendor
       `-- plugins
 
 app
   Holds all the code that's specific to this particular application.
 
 app/controllers
   Holds controllers that should be named like weblogs_controller.rb for
   automated URL mapping. All controllers should descend from
   ApplicationController which itself descends from ActionController::Base.
 
 app/models
   Holds models that should be named like post.rb. Models descend from
   ActiveRecord::Base by default.
 
 app/views
   Holds the template files for the view that should be named like
   weblogs/index.html.erb for the WeblogsController#index action. All views use
   eRuby syntax by default.
 
 app/views/layouts
   Holds the template files for layouts to be used with views. This models the
   common header/footer method of wrapping views. In your views, define a layout
   using the <tt>layout :default</tt> and create a file named default.html.erb.
   Inside default.html.erb, call <% yield %> to render the view using this
   layout.
 
 app/helpers
   Holds view helpers that should be named like weblogs_helper.rb. These are
   generated for you automatically when using generators for controllers.
   Helpers can be used to wrap functionality for your views into methods.
 
 config
   Configuration files for the Rails environment, the routing map, the database,
   and other dependencies.
 
 db
   Contains the database schema in schema.rb. db/migrate contains all the
   sequence of Migrations for your schema.
 
 doc
   This directory is where your application documentation will be stored when
   generated using <tt>rake doc:app</tt>
 
 lib
   Application specific libraries. Basically, any kind of custom code that
   doesn't belong under controllers, models, or helpers. This directory is in
   the load path.
 
 public
   The directory available for the web server. Contains subdirectories for
   images, stylesheets, and javascripts. Also contains the dispatchers and the
   default HTML files. This should be set as the DOCUMENT_ROOT of your web
   server.
 
 script
   Helper scripts for automation and generation.
 
 test
   Unit and functional tests along with fixtures. When using the rails generate
   command, template test files will be generated for you and placed in this
   directory.
 
 vendor
   External libraries that the application depends on. Also includes the plugins
   subdirectory. If the app has frozen rails, those gems also go here, under
   vendor/rails/. This directory is in the load path.
diff -Nr -U 1000 v3.0.1/config/environments/development.rb v3.0.3/config/environments/development.rb
--- v3.0.1/config/environments/development.rb	2012-08-01 15:40:39.000000000 +0200
+++ v3.0.3/config/environments/development.rb	2012-08-01 15:40:43.000000000 +0200
@@ -1,26 +1,26 @@
 Railsdiff::Application.configure do
-  # Settings specified here will take precedence over those in config/environment.rb
+  # Settings specified here will take precedence over those in config/application.rb
 
   # In the development environment your application's code is reloaded on
   # every request.  This slows down response time but is perfect for development
   # since you don't have to restart the webserver when you make code changes.
   config.cache_classes = false
 
   # Log error messages when you accidentally call methods on nil.
   config.whiny_nils = true
 
   # Show full error reports and disable caching
   config.consider_all_requests_local       = true
   config.action_view.debug_rjs             = true
   config.action_controller.perform_caching = false
 
   # Don't care if the mailer can't send
   config.action_mailer.raise_delivery_errors = false
 
   # Print deprecation notices to the Rails logger
   config.active_support.deprecation = :log
 
   # Only use best-standards-support built into browsers
   config.action_dispatch.best_standards_support = :builtin
 end
 
diff -Nr -U 1000 v3.0.1/config/environments/production.rb v3.0.3/config/environments/production.rb
--- v3.0.1/config/environments/production.rb	2012-08-01 15:40:39.000000000 +0200
+++ v3.0.3/config/environments/production.rb	2012-08-01 15:40:43.000000000 +0200
@@ -1,49 +1,49 @@
 Railsdiff::Application.configure do
-  # Settings specified here will take precedence over those in config/environment.rb
+  # Settings specified here will take precedence over those in config/application.rb
 
   # The production environment is meant for finished, "live" apps.
   # Code is not reloaded between requests
   config.cache_classes = true
 
   # Full error reports are disabled and caching is turned on
   config.consider_all_requests_local       = false
   config.action_controller.perform_caching = true
 
   # Specifies the header that your server uses for sending files
   config.action_dispatch.x_sendfile_header = "X-Sendfile"
 
   # For nginx:
   # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect'
 
   # If you have no front-end server that supports something like X-Sendfile,
   # just comment this out and Rails will serve the files
 
   # See everything in the log (default is :info)
   # config.log_level = :debug
 
   # Use a different logger for distributed setups
   # config.logger = SyslogLogger.new
 
   # Use a different cache store in production
   # config.cache_store = :mem_cache_store
 
   # Disable Rails's static asset server
   # In production, Apache or nginx will already do this
   config.serve_static_assets = false
 
   # Enable serving of images, stylesheets, and javascripts from an asset server
   # config.action_controller.asset_host = "http://assets.example.com"
 
   # Disable delivery errors, bad email addresses will be ignored
   # config.action_mailer.raise_delivery_errors = false
 
   # Enable threaded mode
   # config.threadsafe!
 
   # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
   # the I18n.default_locale when a translation can not be found)
   config.i18n.fallbacks = true
 
   # Send deprecation notices to registered listeners
   config.active_support.deprecation = :notify
 end
diff -Nr -U 1000 v3.0.1/config/environments/test.rb v3.0.3/config/environments/test.rb
--- v3.0.1/config/environments/test.rb	2012-08-01 15:40:39.000000000 +0200
+++ v3.0.3/config/environments/test.rb	2012-08-01 15:40:43.000000000 +0200
@@ -1,35 +1,35 @@
 Railsdiff::Application.configure do
-  # Settings specified here will take precedence over those in config/environment.rb
+  # Settings specified here will take precedence over those in config/application.rb
 
   # The test environment is used exclusively to run your application's
   # test suite.  You never need to work with it otherwise.  Remember that
   # your test database is "scratch space" for the test suite and is wiped
   # and recreated between test runs.  Don't rely on the data there!
   config.cache_classes = true
 
   # Log error messages when you accidentally call methods on nil.
   config.whiny_nils = true
 
   # Show full error reports and disable caching
   config.consider_all_requests_local       = true
   config.action_controller.perform_caching = false
 
   # Raise exceptions instead of rendering exception templates
   config.action_dispatch.show_exceptions = false
 
   # Disable request forgery protection in test environment
   config.action_controller.allow_forgery_protection    = false
 
   # Tell Action Mailer not to deliver emails to the real world.
   # The :test delivery method accumulates sent emails in the
   # ActionMailer::Base.deliveries array.
   config.action_mailer.delivery_method = :test
 
   # Use SQL instead of Active Record's schema dumper when creating the test database.
   # This is necessary if your schema can't be completely dumped by the schema dumper,
   # like if you have constraints or database-specific column types
   # config.active_record.schema_format = :sql
 
   # Print deprecation notices to the stderr
   config.active_support.deprecation = :stderr
 end
diff -Nr -U 1000 v3.0.1/config/initializers/session_store.rb v3.0.3/config/initializers/session_store.rb
--- v3.0.1/config/initializers/session_store.rb	2012-08-01 15:40:39.000000000 +0200
+++ v3.0.3/config/initializers/session_store.rb	2012-08-01 15:40:43.000000000 +0200
@@ -1,8 +1,8 @@
 # Be sure to restart your server when you modify this file.
 
 Railsdiff::Application.config.session_store :cookie_store, :key => '_railsdiff_session'
 
 # Use the database for sessions instead of the cookie-based default,
 # which shouldn't be used to store highly confidential information
-# (create the session table with "rake db:sessions:create")
+# (create the session table with "rails generate session_migration")
 # Railsdiff::Application.config.session_store :active_record_store
