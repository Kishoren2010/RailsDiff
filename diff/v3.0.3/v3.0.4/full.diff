diff -Nr -U 1000 v3.0.3/.gitignore v3.0.4/.gitignore
--- v3.0.3/.gitignore	2012-08-01 15:40:43.000000000 +0200
+++ v3.0.4/.gitignore	2012-08-01 15:40:48.000000000 +0200
@@ -1,4 +1,4 @@
 .bundle
 db/*.sqlite3
 log/*.log
-tmp/**/*
+tmp/
diff -Nr -U 1000 v3.0.3/Gemfile v3.0.4/Gemfile
--- v3.0.3/Gemfile	2012-08-01 15:40:43.000000000 +0200
+++ v3.0.4/Gemfile	2012-08-01 15:40:48.000000000 +0200
@@ -1,31 +1,31 @@
 source 'http://rubygems.org'
 
-gem 'rails', '3.0.3'
+gem 'rails', '3.0.4'
 
 # Bundle edge Rails instead:
 # gem 'rails', :git => 'git://github.com/rails/rails.git'
 
-gem 'sqlite3-ruby', :require => 'sqlite3'
+gem 'sqlite3'
 
 # Use unicorn as the web server
 # gem 'unicorn'
 
 # Deploy with Capistrano
 # gem 'capistrano'
 
 # To use debugger (ruby-debug for Ruby 1.8.7+, ruby-debug19 for Ruby 1.9.2+)
 # gem 'ruby-debug'
 # gem 'ruby-debug19'
 
 # Bundle the extra gems:
 # gem 'bj'
 # gem 'nokogiri'
 # gem 'sqlite3-ruby', :require => 'sqlite3'
 # gem 'aws-s3', :require => 'aws/s3'
 
 # Bundle gems for the local environment. Make sure to
 # put test-only gems in this group so their generators
 # and rake tasks are available in development mode:
 # group :development, :test do
 #   gem 'webrat'
 # end
diff -Nr -U 1000 v3.0.3/config/boot.rb v3.0.4/config/boot.rb
--- v3.0.3/config/boot.rb	2012-08-01 15:40:43.000000000 +0200
+++ v3.0.4/config/boot.rb	2012-08-01 15:40:48.000000000 +0200
@@ -1,13 +1,6 @@
 require 'rubygems'
 
 # Set up gems listed in the Gemfile.
-gemfile = File.expand_path('../../Gemfile', __FILE__)
-begin
-  ENV['BUNDLE_GEMFILE'] = gemfile
-  require 'bundler'
-  Bundler.setup
-rescue Bundler::GemNotFound => e
-  STDERR.puts e.message
-  STDERR.puts "Try running `bundle install`."
-  exit!
-end if File.exist?(gemfile)
+ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', __FILE__)
+
+require 'bundler/setup' if File.exists?(ENV['BUNDLE_GEMFILE'])
diff -Nr -U 1000 v3.0.3/config/database.yml v3.0.4/config/database.yml
--- v3.0.3/config/database.yml	2012-08-01 15:40:43.000000000 +0200
+++ v3.0.4/config/database.yml	2012-08-01 15:40:48.000000000 +0200
@@ -1,22 +1,22 @@
 # SQLite version 3.x
-#   gem install sqlite3-ruby (not necessary on OS X Leopard)
+#   gem install sqlite3
 development:
   adapter: sqlite3
   database: db/development.sqlite3
   pool: 5
   timeout: 5000
 
 # Warning: The database defined as "test" will be erased and
 # re-generated from your development database when you run "rake".
 # Do not set this db to the same as development or production.
 test:
   adapter: sqlite3
   database: db/test.sqlite3
   pool: 5
   timeout: 5000
 
 production:
   adapter: sqlite3
   database: db/production.sqlite3
   pool: 5
   timeout: 5000
diff -Nr -U 1000 v3.0.3/public/javascripts/rails.js v3.0.4/public/javascripts/rails.js
--- v3.0.3/public/javascripts/rails.js	2012-08-01 15:40:43.000000000 +0200
+++ v3.0.4/public/javascripts/rails.js	2012-08-01 15:40:48.000000000 +0200
@@ -1,175 +1,191 @@
 (function() {
   // Technique from Juriy Zaytsev
   // http://thinkweb2.com/projects/prototype/detecting-event-support-without-browser-sniffing/
   function isEventSupported(eventName) {
     var el = document.createElement('div');
     eventName = 'on' + eventName;
     var isSupported = (eventName in el);
     if (!isSupported) {
       el.setAttribute(eventName, 'return;');
       isSupported = typeof el[eventName] == 'function';
     }
     el = null;
     return isSupported;
   }
 
   function isForm(element) {
     return Object.isElement(element) && element.nodeName.toUpperCase() == 'FORM'
   }
 
   function isInput(element) {
     if (Object.isElement(element)) {
       var name = element.nodeName.toUpperCase()
       return name == 'INPUT' || name == 'SELECT' || name == 'TEXTAREA'
     }
     else return false
   }
 
   var submitBubbles = isEventSupported('submit'),
       changeBubbles = isEventSupported('change')
 
   if (!submitBubbles || !changeBubbles) {
     // augment the Event.Handler class to observe custom events when needed
     Event.Handler.prototype.initialize = Event.Handler.prototype.initialize.wrap(
       function(init, element, eventName, selector, callback) {
         init(element, eventName, selector, callback)
         // is the handler being attached to an element that doesn't support this event?
         if ( (!submitBubbles && this.eventName == 'submit' && !isForm(this.element)) ||
              (!changeBubbles && this.eventName == 'change' && !isInput(this.element)) ) {
           // "submit" => "emulated:submit"
           this.eventName = 'emulated:' + this.eventName
         }
       }
     )
   }
 
   if (!submitBubbles) {
     // discover forms on the page by observing focus events which always bubble
     document.on('focusin', 'form', function(focusEvent, form) {
       // special handler for the real "submit" event (one-time operation)
       if (!form.retrieve('emulated:submit')) {
         form.on('submit', function(submitEvent) {
           var emulated = form.fire('emulated:submit', submitEvent, true)
           // if custom event received preventDefault, cancel the real one too
           if (emulated.returnValue === false) submitEvent.preventDefault()
         })
         form.store('emulated:submit', true)
       }
     })
   }
 
   if (!changeBubbles) {
     // discover form inputs on the page
     document.on('focusin', 'input, select, texarea', function(focusEvent, input) {
       // special handler for real "change" events
       if (!input.retrieve('emulated:change')) {
         input.on('change', function(changeEvent) {
           input.fire('emulated:change', changeEvent, true)
         })
         input.store('emulated:change', true)
       }
     })
   }
 
   function handleRemote(element) {
     var method, url, params;
 
     var event = element.fire("ajax:before");
     if (event.stopped) return false;
 
     if (element.tagName.toLowerCase() === 'form') {
       method = element.readAttribute('method') || 'post';
       url    = element.readAttribute('action');
       params = element.serialize();
     } else {
       method = element.readAttribute('data-method') || 'get';
       url    = element.readAttribute('href');
       params = {};
     }
 
     new Ajax.Request(url, {
       method: method,
       parameters: params,
       evalScripts: true,
 
       onComplete:    function(request) { element.fire("ajax:complete", request); },
       onSuccess:     function(request) { element.fire("ajax:success",  request); },
       onFailure:     function(request) { element.fire("ajax:failure",  request); }
     });
 
     element.fire("ajax:after");
   }
 
   function handleMethod(element) {
     var method = element.readAttribute('data-method'),
         url = element.readAttribute('href'),
         csrf_param = $$('meta[name=csrf-param]')[0],
         csrf_token = $$('meta[name=csrf-token]')[0];
 
     var form = new Element('form', { method: "POST", action: url, style: "display: none;" });
     element.parentNode.insert(form);
 
     if (method !== 'post') {
       var field = new Element('input', { type: 'hidden', name: '_method', value: method });
       form.insert(field);
     }
 
     if (csrf_param) {
       var param = csrf_param.readAttribute('content'),
           token = csrf_token.readAttribute('content'),
           field = new Element('input', { type: 'hidden', name: param, value: token });
       form.insert(field);
     }
 
     form.submit();
   }
 
 
   document.on("click", "*[data-confirm]", function(event, element) {
     var message = element.readAttribute('data-confirm');
     if (!confirm(message)) event.stop();
   });
 
   document.on("click", "a[data-remote]", function(event, element) {
     if (event.stopped) return;
     handleRemote(element);
     event.stop();
   });
 
   document.on("click", "a[data-method]", function(event, element) {
     if (event.stopped) return;
     handleMethod(element);
     event.stop();
   });
 
   document.on("submit", function(event) {
     var element = event.findElement(),
         message = element.readAttribute('data-confirm');
     if (message && !confirm(message)) {
       event.stop();
       return false;
     }
 
     var inputs = element.select("input[type=submit][data-disable-with]");
     inputs.each(function(input) {
       input.disabled = true;
       input.writeAttribute('data-original-value', input.value);
       input.value = input.readAttribute('data-disable-with');
     });
 
     var element = event.findElement("form[data-remote]");
     if (element) {
       handleRemote(element);
       event.stop();
     }
   });
 
   document.on("ajax:after", "form", function(event, element) {
     var inputs = element.select("input[type=submit][disabled=true][data-disable-with]");
     inputs.each(function(input) {
       input.value = input.readAttribute('data-original-value');
       input.removeAttribute('data-original-value');
       input.disabled = false;
     });
   });
+
+  Ajax.Responders.register({
+    onCreate: function(request) {
+      var csrf_meta_tag = $$('meta[name=csrf-token]')[0];
+
+      if (csrf_meta_tag) {
+        var header = 'X-CSRF-Token',
+            token = csrf_meta_tag.readAttribute('content');
+
+        if (!request.options.requestHeaders) {
+          request.options.requestHeaders = {};
+        }
+        request.options.requestHeaders[header] = token;
+      }
+    }
+  });
 })();
