diff -Nr -U 1000 -x '*.png' v3.2.0/Gemfile v3.2.20/Gemfile
--- v3.2.0/Gemfile	2014-02-21 19:36:47.000000000 -0800
+++ v3.2.20/Gemfile	2014-10-31 00:45:49.000000000 -0700
@@ -1,38 +1,38 @@
 source 'https://rubygems.org'
 
-gem 'rails', '3.2.0'
+gem 'rails', '3.2.20'
 
 # Bundle edge Rails instead:
 # gem 'rails', :git => 'git://github.com/rails/rails.git'
 
 gem 'sqlite3'
 
 
 # Gems used only for assets and not required
 # in production environments by default.
 group :assets do
   gem 'sass-rails',   '~> 3.2.3'
   gem 'coffee-rails', '~> 3.2.1'
 
   # See https://github.com/sstephenson/execjs#readme for more supported runtimes
-  # gem 'therubyracer'
+  # gem 'therubyracer', :platforms => :ruby
 
   gem 'uglifier', '>= 1.0.3'
 end
 
 gem 'jquery-rails'
 
 # To use ActiveModel has_secure_password
 # gem 'bcrypt-ruby', '~> 3.0.0'
 
 # To use Jbuilder templates for JSON
 # gem 'jbuilder'
 
-# Use unicorn as the web server
+# Use unicorn as the app server
 # gem 'unicorn'
 
 # Deploy with Capistrano
 # gem 'capistrano'
 
 # To use debugger
-# gem 'ruby-debug19', :require => 'ruby-debug'
+# gem 'debugger'
diff -Nr -U 1000 -x '*.png' v3.2.0/README.rdoc v3.2.20/README.rdoc
--- v3.2.0/README.rdoc	2014-02-21 19:36:47.000000000 -0800
+++ v3.2.20/README.rdoc	2014-10-31 00:45:49.000000000 -0700
@@ -1,261 +1,261 @@
 == Welcome to Rails
 
 Rails is a web-application framework that includes everything needed to create
 database-backed web applications according to the Model-View-Control pattern.
 
 This pattern splits the view (also called the presentation) into "dumb"
 templates that are primarily responsible for inserting pre-built data in between
 HTML tags. The model contains the "smart" domain objects (such as Account,
 Product, Person, Post) that holds all the business logic and knows how to
 persist themselves to a database. The controller handles the incoming requests
 (such as Save New Account, Update Product, Show Post) by manipulating the model
 and directing data to the view.
 
 In Rails, the model is handled by what's called an object-relational mapping
 layer entitled Active Record. This layer allows you to present the data from
 database rows as objects and embellish these data objects with business logic
 methods. You can read more about Active Record in
 link:files/vendor/rails/activerecord/README.html.
 
 The controller and view are handled by the Action Pack, which handles both
 layers by its two parts: Action View and Action Controller. These two layers
 are bundled in a single package due to their heavy interdependence. This is
 unlike the relationship between the Active Record and Action Pack that is much
 more separate. Each of these packages can be used independently outside of
 Rails. You can read more about Action Pack in
 link:files/vendor/rails/actionpack/README.html.
 
 
 == Getting Started
 
 1. At the command prompt, create a new Rails application:
        <tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)
 
 2. Change directory to <tt>myapp</tt> and start the web server:
        <tt>cd myapp; rails server</tt> (run with --help for options)
 
 3. Go to http://localhost:3000/ and you'll see:
        "Welcome aboard: You're riding Ruby on Rails!"
 
 4. Follow the guidelines to start developing your application. You can find
 the following resources handy:
 
 * The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html
 * Ruby on Rails Tutorial Book: http://www.railstutorial.org/
 
 
 == Debugging Rails
 
 Sometimes your application goes wrong. Fortunately there are a lot of tools that
 will help you debug it and get it back on the rails.
 
 First area to check is the application log files. Have "tail -f" commands
 running on the server.log and development.log. Rails will automatically display
 debugging and runtime information to these files. Debugging info will also be
 shown in the browser on requests from 127.0.0.1.
 
 You can also log your own messages directly into the log file from your code
 using the Ruby logger class from inside your controllers. Example:
 
   class WeblogController < ActionController::Base
     def destroy
       @weblog = Weblog.find(params[:id])
       @weblog.destroy
       logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
     end
   end
 
 The result will be a message in your log file along the lines of:
 
   Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!
 
 More information on how to use the logger is at http://www.ruby-doc.org/core/
 
 Also, Ruby documentation can be found at http://www.ruby-lang.org/. There are
 several books available online as well:
 
 * Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)
 * Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)
 
 These two books will bring you up to speed on the Ruby language and also on
 programming in general.
 
 
 == Debugger
 
 Debugger support is available through the debugger command when you start your
 Mongrel or WEBrick server with --debugger. This means that you can break out of
 execution at any point in the code, investigate and change the model, and then,
 resume execution! You need to install ruby-debug to run the server in debugging
 mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:
 
   class WeblogController < ActionController::Base
     def index
       @posts = Post.all
       debugger
     end
   end
 
 So the controller will accept the action, run the first line, then present you
 with a IRB prompt in the server window. Here you can do things like:
 
   >> @posts.inspect
   => "[#<Post:0x14a6be8
           @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>,
        #<Post:0x14a6620
           @attributes={"title"=>"Rails", "body"=>"Only ten..", "id"=>"2"}>]"
   >> @posts.first.title = "hello from a debugger"
   => "hello from a debugger"
 
 ...and even better, you can examine how your runtime objects actually work:
 
   >> f = @posts.first
   => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
   >> f.
   Display all 152 possibilities? (y or n)
 
 Finally, when you're ready to resume execution, you can enter "cont".
 
 
 == Console
 
 The console is a Ruby shell, which allows you to interact with your
 application's domain model. Here you'll have all parts of the application
 configured, just like it is when the application is running. You can inspect
 domain models, change values, and save to the database. Starting the script
 without arguments will launch it in the development environment.
 
 To start the console, run <tt>rails console</tt> from the application
 directory.
 
 Options:
 
 * Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications
   made to the database.
 * Passing an environment name as an argument will load the corresponding
   environment. Example: <tt>rails console production</tt>.
 
 To reload your controllers and models after launching the console run
 <tt>reload!</tt>
 
 More information about irb can be found at:
 link:http://www.rubycentral.org/pickaxe/irb.html
 
 
 == dbconsole
 
 You can go to the command line of your database directly through <tt>rails
 dbconsole</tt>. You would be connected to the database with the credentials
 defined in database.yml. Starting the script without arguments will connect you
 to the development database. Passing an argument will connect you to a different
 database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,
 PostgreSQL and SQLite 3.
 
 == Description of Contents
 
 The default directory structure of a generated Ruby on Rails application:
 
   |-- app
   |   |-- assets
-  |       |-- images
-  |       |-- javascripts
-  |       `-- stylesheets
+  |   |   |-- images
+  |   |   |-- javascripts
+  |   |   `-- stylesheets
   |   |-- controllers
   |   |-- helpers
   |   |-- mailers
   |   |-- models
   |   `-- views
   |       `-- layouts
   |-- config
   |   |-- environments
   |   |-- initializers
   |   `-- locales
   |-- db
   |-- doc
   |-- lib
+  |   |-- assets
   |   `-- tasks
   |-- log
   |-- public
   |-- script
   |-- test
   |   |-- fixtures
   |   |-- functional
   |   |-- integration
   |   |-- performance
   |   `-- unit
   |-- tmp
-  |   |-- cache
-  |   |-- pids
-  |   |-- sessions
-  |   `-- sockets
+  |   `-- cache
+  |       `-- assets
   `-- vendor
       |-- assets
-          `-- stylesheets
+      |   |-- javascripts
+      |   `-- stylesheets
       `-- plugins
 
 app
   Holds all the code that's specific to this particular application.
 
 app/assets
   Contains subdirectories for images, stylesheets, and JavaScript files.
 
 app/controllers
   Holds controllers that should be named like weblogs_controller.rb for
   automated URL mapping. All controllers should descend from
   ApplicationController which itself descends from ActionController::Base.
 
 app/models
   Holds models that should be named like post.rb. Models descend from
   ActiveRecord::Base by default.
 
 app/views
   Holds the template files for the view that should be named like
   weblogs/index.html.erb for the WeblogsController#index action. All views use
   eRuby syntax by default.
 
 app/views/layouts
   Holds the template files for layouts to be used with views. This models the
   common header/footer method of wrapping views. In your views, define a layout
   using the <tt>layout :default</tt> and create a file named default.html.erb.
   Inside default.html.erb, call <% yield %> to render the view using this
   layout.
 
 app/helpers
   Holds view helpers that should be named like weblogs_helper.rb. These are
   generated for you automatically when using generators for controllers.
   Helpers can be used to wrap functionality for your views into methods.
 
 config
   Configuration files for the Rails environment, the routing map, the database,
   and other dependencies.
 
 db
   Contains the database schema in schema.rb. db/migrate contains all the
   sequence of Migrations for your schema.
 
 doc
   This directory is where your application documentation will be stored when
   generated using <tt>rake doc:app</tt>
 
 lib
   Application specific libraries. Basically, any kind of custom code that
   doesn't belong under controllers, models, or helpers. This directory is in
   the load path.
 
 public
   The directory available for the web server. Also contains the dispatchers and the
   default HTML files. This should be set as the DOCUMENT_ROOT of your web
   server.
 
 script
   Helper scripts for automation and generation.
 
 test
   Unit and functional tests along with fixtures. When using the rails generate
   command, template test files will be generated for you and placed in this
   directory.
 
 vendor
   External libraries that the application depends on. Also includes the plugins
   subdirectory. If the app has frozen rails, those gems also go here, under
   vendor/rails/. This directory is in the load path.
diff -Nr -U 1000 -x '*.png' v3.2.0/app/assets/stylesheets/application.css v3.2.20/app/assets/stylesheets/application.css
--- v3.2.0/app/assets/stylesheets/application.css	2014-02-21 19:36:47.000000000 -0800
+++ v3.2.20/app/assets/stylesheets/application.css	2014-10-31 00:45:49.000000000 -0700
@@ -1,13 +1,13 @@
 /*
  * This is a manifest file that'll be compiled into application.css, which will include all the files
  * listed below.
  *
  * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,
  * or vendor/assets/stylesheets of plugins, if any, can be referenced here using a relative path.
  *
  * You're free to add application-wide styles to this file and they'll appear at the top of the
  * compiled file, but it's generally better to create a new file per style scope.
  *
  *= require_self
  *= require_tree .
-*/
+ */
diff -Nr -U 1000 -x '*.png' v3.2.0/config/application.rb v3.2.20/config/application.rb
--- v3.2.0/config/application.rb	2014-02-21 19:36:47.000000000 -0800
+++ v3.2.20/config/application.rb	2014-10-31 00:45:49.000000000 -0700
@@ -1,59 +1,62 @@
 require File.expand_path('../boot', __FILE__)
 
 require 'rails/all'
 
 if defined?(Bundler)
   # If you precompile assets before deploying to production, use this line
   Bundler.require(*Rails.groups(:assets => %w(development test)))
   # If you want your assets lazily compiled in production, use this line
   # Bundler.require(:default, :assets, Rails.env)
 end
 
 module Railsdiff
   class Application < Rails::Application
     # Settings in config/environments/* take precedence over those specified here.
     # Application configuration should go into files in config/initializers
     # -- all .rb files in that directory are automatically loaded.
 
     # Custom directories with classes and modules you want to be autoloadable.
     # config.autoload_paths += %W(#{config.root}/extras)
 
     # Only load the plugins named here, in the order given (default is alphabetical).
     # :all can be used as a placeholder for all plugins not explicitly named.
     # config.plugins = [ :exception_notification, :ssl_requirement, :all ]
 
     # Activate observers that should always be running.
     # config.active_record.observers = :cacher, :garbage_collector, :forum_observer
 
     # Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.
     # Run "rake -D time" for a list of tasks for finding time zone names. Default is UTC.
     # config.time_zone = 'Central Time (US & Canada)'
 
     # The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.
     # config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}').to_s]
     # config.i18n.default_locale = :de
 
     # Configure the default encoding used in templates for Ruby 1.9.
     config.encoding = "utf-8"
 
     # Configure sensitive parameters which will be filtered from the log file.
     config.filter_parameters += [:password]
 
+    # Enable escaping HTML in JSON.
+    config.active_support.escape_html_entities_in_json = true
+
     # Use SQL instead of Active Record's schema dumper when creating the database.
     # This is necessary if your schema can't be completely dumped by the schema dumper,
     # like if you have constraints or database-specific column types
     # config.active_record.schema_format = :sql
 
     # Enforce whitelist mode for mass assignment.
     # This will create an empty whitelist of attributes available for mass-assignment for all models
     # in your app. As such, your models will need to explicitly whitelist or blacklist accessible
     # parameters by using an attr_accessible or attr_protected declaration.
-    # config.active_record.whitelist_attributes = true
+    config.active_record.whitelist_attributes = true
 
     # Enable the asset pipeline
     config.assets.enabled = true
 
     # Version of your assets, change this if you want to expire all your assets
     config.assets.version = '1.0'
   end
 end
diff -Nr -U 1000 -x '*.png' v3.2.0/config/environments/production.rb v3.2.20/config/environments/production.rb
--- v3.2.0/config/environments/production.rb	2014-02-21 19:36:47.000000000 -0800
+++ v3.2.20/config/environments/production.rb	2014-10-31 00:45:49.000000000 -0700
@@ -1,67 +1,67 @@
 Railsdiff::Application.configure do
   # Settings specified here will take precedence over those in config/application.rb
 
   # Code is not reloaded between requests
   config.cache_classes = true
 
   # Full error reports are disabled and caching is turned on
   config.consider_all_requests_local       = false
   config.action_controller.perform_caching = true
 
   # Disable Rails's static asset server (Apache or nginx will already do this)
   config.serve_static_assets = false
 
   # Compress JavaScripts and CSS
   config.assets.compress = true
 
   # Don't fallback to assets pipeline if a precompiled asset is missed
   config.assets.compile = false
 
   # Generate digests for assets URLs
   config.assets.digest = true
 
-  # Defaults to Rails.root.join("public/assets")
+  # Defaults to nil and saved in location specified by config.assets.prefix
   # config.assets.manifest = YOUR_PATH
 
   # Specifies the header that your server uses for sending files
   # config.action_dispatch.x_sendfile_header = "X-Sendfile" # for apache
   # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for nginx
 
   # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
   # config.force_ssl = true
 
   # See everything in the log (default is :info)
   # config.log_level = :debug
 
   # Prepend all log lines with the following tags
   # config.log_tags = [ :subdomain, :uuid ]
 
   # Use a different logger for distributed setups
   # config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)
 
   # Use a different cache store in production
   # config.cache_store = :mem_cache_store
 
   # Enable serving of images, stylesheets, and JavaScripts from an asset server
   # config.action_controller.asset_host = "http://assets.example.com"
 
   # Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
   # config.assets.precompile += %w( search.js )
 
   # Disable delivery errors, bad email addresses will be ignored
   # config.action_mailer.raise_delivery_errors = false
 
   # Enable threaded mode
   # config.threadsafe!
 
   # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
   # the I18n.default_locale when a translation can not be found)
   config.i18n.fallbacks = true
 
   # Send deprecation notices to registered listeners
   config.active_support.deprecation = :notify
 
   # Log the query plan for queries taking more than this (works
   # with SQLite, MySQL, and PostgreSQL)
   # config.active_record.auto_explain_threshold_in_seconds = 0.5
 end
